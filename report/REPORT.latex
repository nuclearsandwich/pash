\documentclass{article}
\usepackage{graphicx}
\usepackage{fullpage}


\title{Programming Project Progress Report}
\date{\today}
\author{Sean Canavan \and Nick LeClair \and Steven! Lorenzen}
\begin{document}
\maketitle

% 1.-Overview diagram of the modules to be included in your program. Flow digram.
\section{Modules in sh142}

Our implementation of sh142 will include multiple modules broken up by task
responsibility.

Our main modules deal with input reading, program execution, and networking.
Each of those main modules has submodules for more finely grained
implementation details.

The figure below details our dependency graph.

\begin{center}
\includegraphics[width=12cm]{modules.png}
\end{center}

% 2.-Enumeration of the APIs of each module.
\section{Main Module APIs}

\subsection{input\_reader}
\begin{itemize}
	\item \texttt{char* readline(char*)} - A thin wrapper around GNU Readline.
\end{itemize}

\subsection{input\_tokenizer}
\begin{itemize}
	\item \texttt{char*[] tokenize(char*)} - Break the input up into individual
		tokens separated by whitespace. Quoted bodies are kept together with quoting
		stripped.
\end{itemize}

\subsection{command\_runner}
\begin{itemize}
	\item \texttt{void invoke\_command(char*[])} - Invoke the tokenized command as
		a sh142 command. This is the stage where input will be parsed before being
		delegated elsewhere.. for-loop expansion and PATH and DATA lookup will also be
		substituted here.
\end{itemize}

\subsection{path\_lookup}
\begin{itemize}
	\item \texttt{char* resolve\_data(char*)} -
		Test for presence of filename in the specified DATA path. If, present
		return the absolute path to the file otherwise NULL.

	\item \texttt{char* resolve\_executable(char*)} -
		Test for presence of filename in the specified PATH variable. If present
		return the absolute path to the file otherwise NULL.
\end{itemize}

\subsection{program\_caller}
\begin{itemize}
	\item \texttt{int runcmd(char* cmd, char* argv[])} -
		Run the command with the given arguments return the exit code of the
		command.
	\item \texttt{int bgruncmd(char* cmd, char* argv[])} -
		Run the command with the given arguments in the background, retyrn the pid
		of the created job.
\end{itemize}

\subsection{network\_node}
TBD

\section{Work Plan}

The work will primarily be broken up by module as given below:
\begin{itemize}
	\item input\_reader - \textsc{completed}
	\item complete spec tests - All by April 7
	\item program\_caller - Steven! by April 14
	\item path\_lookup - Sean by April 14
	\item input\_tokenizer - Nick by April 14
	\item command\_runner - Sean and Steven! by April 21
	\item main sh142 - Nick and Steven! by April 21
	\item network\_node - Nick and Sean by April 28
	\item report - All by May 8
\end{itemize}

\section{Test Plan}

Testing will be carried out at every stage of development. Prior to designing
the API, a test harness for complete automated interaction testing was set up
using the Cucumber tool. As we build the API we will be using the ctest unit-test
framework to perform isolated tests on individual C functions.

A sample of cucumber output:
\begin{center}
\includegraphics[width=10cm]{cuke.png}
\end{center}

\end{document}

